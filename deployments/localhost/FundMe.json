{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x556e89151dcb84e54f8af009757ae24571f1abfdb686983c5697ed8e1397f1d7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1048236",
    "logsBloom": "0x
    "blockHash": "0x79fc8917fb5c1e223a3de144696f02cdd4ada40c91355f43dd68fca9aec7b09a",
    "transactionHash": "0x556e89151dcb84e54f8af009757ae24571f1abfdb686983c5697ed8e1397f1d7",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1048236",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "3391d1c9d58444b5b127b3c32850de8c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Han\",\"details\":\"Uses the Chainlink Price Feed contract and a PriceConverter library \",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"Calculates the amount of ETH in USD and stores the sender's address and amount funded\"},\"getAddressToAmountFunded(address)\":{\"params\":{\"funder\":\"The address of the funder to retrieve the contribution for.\"},\"returns\":{\"_0\":\"The amount of Ether that the funder has contributed.\"}},\"getFunder(uint256)\":{\"params\":{\"index\":\"The index of the funder to retrieve.\"},\"returns\":{\"_0\":\"The address of the funder.\"}},\"getOwner()\":{\"returns\":{\"_0\":\"The address of the owner.\"}},\"getPriceFeed()\":{\"returns\":{\"_0\":\"The AggregatorV3Interface object representing the price feed.\"}},\"withdraw()\":{\"details\":\"Resets the list of funders, sets their amounts to zero, and sends the contract balance to the owner\"}},\"title\":\"FundMe\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Allows users to fund the contract with ETH\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Returns the amount of Ether that a funder has contributed to the contract.\"},\"getFunder(uint256)\":{\"notice\":\"Returns the address of a funder at a given index in the array of funders.\"},\"getOwner()\":{\"notice\":\"Returns the owner of the contract.\"},\"getPriceFeed()\":{\"notice\":\"Returns the price feed that is being used by the contract to determine the ETH/USD exchange rate.\"},\"withdraw()\":{\"notice\":\"Allows the owner to withdraw all funds from the contract\"}},\"notice\":\"A contract that allows people to fund it with ETH and withdraw funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error\\nerror FundMe__NotOwner();\\n\\n/** @title FundMe\\n * @author Han\\n * @notice A contract that allows people to fund it with ETH and withdraw funds\\n * @dev Uses the Chainlink Price Feed contract and a PriceConverter library */\\ncontract FundMe {\\n    // Using library PriceConverter\\n    using PriceConverter for uint256;\\n\\n    // Constant is all caps and underscore by convention\\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\\n    address private immutable i_owner;\\n\\n    address[] public s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n\\n    /** @notice Allows users to fund the contract with ETH\\n     * @dev Calculates the amount of ETH in USD and stores the sender's address and amount funded\\n     */\\n    function fund() public payable {\\n        // msg.value = 1e18;\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend some ETH\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    /**\\n     * @notice Allows the owner to withdraw all funds from the contract\\n     * @dev Resets the list of funders, sets their amounts to zero, and sends the contract balance to the owner\\n     */\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // Reset the array\\n        s_funders = new address[](0);\\n\\n        // Send the money to the person who called this function\\n        // 1. Transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // 2. Send\\n        // bool sentSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sentSuccess, \\\"Failed to send Ether\\\");\\n\\n        // 3. Call\\n        (bool sentSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(sentSuccess, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool sentSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(sentSuccess, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * If user send this contract ether directly instead of calling the fund function, either one of it will run\\n     */\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /** @dev Throws if the caller is not the owner */\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"You are not the owner\\\");\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * Returns the owner of the contract.\\n     * @return The address of the owner.\\n     */\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    /**\\n     * Returns the address of a funder at a given index in the array of funders.\\n     * @param index The index of the funder to retrieve.\\n     * @return The address of the funder.\\n     */\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    /**\\n     * Returns the amount of Ether that a funder has contributed to the contract.\\n     * @param funder The address of the funder to retrieve the contribution for.\\n     * @return The amount of Ether that the funder has contributed.\\n     */\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    /**\\n     * Returns the price feed that is being used by the contract to determine the ETH/USD exchange rate.\\n     * @return The AggregatorV3Interface object representing the price feed.\\n     */\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x54d48cf3f964394667bf3f7d660aace41e3a8fe54d41d1151cbf3081e3363719\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) public view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in USD with 8 digits behind\\n        // To get the price in USD, we need to times by 1e10\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x2f5752d48ce8f89dd05ad80d6406f14a2acf57ec8b9eec1aeb506bd7b794a573\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200131638038062001316833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111976200017f6000396000818161037901528181610606015261065601526111976000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461015f5780639e87a5cd1461018a578063b60d4288146101b5578063be2693f0146101bf578063d7b4750c146101c957610099565b80630343fb25146100a35780633ccfd60b146100e057806354861af7146100f75780636b69a5921461013457610099565b3661009957610097610206565b005b6100a1610206565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b25565b61032e565b6040516100d79190610b6b565b60405180910390f35b3480156100ec57600080fd5b506100f5610377565b005b34801561010357600080fd5b5061011e60048036038101906101199190610bb2565b6105b7565b60405161012b9190610bee565b60405180910390f35b34801561014057600080fd5b506101496105f6565b6040516101569190610b6b565b60405180910390f35b34801561016b57600080fd5b50610174610602565b6040516101819190610bee565b60405180910390f35b34801561019657600080fd5b5061019f61062a565b6040516101ac9190610c68565b60405180910390f35b6101bd610206565b005b6101c7610654565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190610bb2565b6108f8565b6040516101fd9190610bee565b60405180910390f35b678ac7230489e80000610244600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461093f90919063ffffffff16565b1015610285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027c90610ce0565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103fc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104a757600080828154811061042157610420610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049f90610d5e565b9150506103ff565b50600067ffffffffffffffff8111156104c3576104c2610da7565b5b6040519080825280602002602001820160405280156104f15781602001602082028036833780820191505090505b5060009080519060200190610507929190610a1b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052e90610e07565b60006040518083038185875af1925050503d806000811461056b576040519150601f19603f3d011682016040523d82523d6000602084013e610570565b606091505b50509050806105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab90610e68565b60405180910390fd5b50565b600081815481106105c757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561075c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610712575b5050505050905060005b81518110156107e757600082828151811061078457610783610d00565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107df90610d5e565b915050610766565b50600067ffffffffffffffff81111561080357610802610da7565b5b6040519080825280602002602001820160405280156108315781602001602082028036833780820191505090505b5060009080519060200190610847929190610a1b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161086e90610e07565b60006040518083038185875af1925050503d80600081146108ab576040519150601f19603f3d011682016040523d82523d6000602084013e6108b0565b606091505b50509050806108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108eb90610e68565b60405180910390fd5b5050565b600080828154811061090d5761090c610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061094b8361097b565b90506000670de0b6b3a764000085836109649190610e88565b61096e9190610f11565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190610fcf565b5050509150506402540be40081610a13919061104a565b915050919050565b828054828255906000526020600020908101928215610a94579160200282015b82811115610a935782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a3b565b5b509050610aa19190610aa5565b5090565b5b80821115610abe576000816000905550600101610aa6565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af282610ac7565b9050919050565b610b0281610ae7565b8114610b0d57600080fd5b50565b600081359050610b1f81610af9565b92915050565b600060208284031215610b3b57610b3a610ac2565b5b6000610b4984828501610b10565b91505092915050565b6000819050919050565b610b6581610b52565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b610b8f81610b52565b8114610b9a57600080fd5b50565b600081359050610bac81610b86565b92915050565b600060208284031215610bc857610bc7610ac2565b5b6000610bd684828501610b9d565b91505092915050565b610be881610ae7565b82525050565b6000602082019050610c036000830184610bdf565b92915050565b6000819050919050565b6000610c2e610c29610c2484610ac7565b610c09565b610ac7565b9050919050565b6000610c4082610c13565b9050919050565b6000610c5282610c35565b9050919050565b610c6281610c47565b82525050565b6000602082019050610c7d6000830184610c59565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e6420736f6d6520455448000000000000600082015250565b6000610cca601a83610c83565b9150610cd582610c94565b602082019050919050565b60006020820190508181036000830152610cf981610cbd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6982610b52565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9c57610d9b610d2f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df1600083610dd6565b9150610dfc82610de1565b600082019050919050565b6000610e1282610de4565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610e52601483610c83565b9150610e5d82610e1c565b602082019050919050565b60006020820190508181036000830152610e8181610e45565b9050919050565b6000610e9382610b52565b9150610e9e83610b52565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ed757610ed6610d2f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1c82610b52565b9150610f2783610b52565b925082610f3757610f36610ee2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6181610f42565b8114610f6c57600080fd5b50565b600081519050610f7e81610f58565b92915050565b6000819050919050565b610f9781610f84565b8114610fa257600080fd5b50565b600081519050610fb481610f8e565b92915050565b600081519050610fc981610b86565b92915050565b600080600080600060a08688031215610feb57610fea610ac2565b5b6000610ff988828901610f6f565b955050602061100a88828901610fa5565b945050604061101b88828901610fba565b935050606061102c88828901610fba565b925050608061103d88828901610f6f565b9150509295509295909350565b600061105582610f84565b915061106083610f84565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109f5761109e610d2f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110dc576110db610d2f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111957611118610d2f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115657611155610d2f565b5b82820290509291505056fea2646970667358221220048d6bc7f53ac8c6045a217b0fb73eb1e40f611b720a2ce56d8c87379d1563f264736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461015f5780639e87a5cd1461018a578063b60d4288146101b5578063be2693f0146101bf578063d7b4750c146101c957610099565b80630343fb25146100a35780633ccfd60b146100e057806354861af7146100f75780636b69a5921461013457610099565b3661009957610097610206565b005b6100a1610206565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b25565b61032e565b6040516100d79190610b6b565b60405180910390f35b3480156100ec57600080fd5b506100f5610377565b005b34801561010357600080fd5b5061011e60048036038101906101199190610bb2565b6105b7565b60405161012b9190610bee565b60405180910390f35b34801561014057600080fd5b506101496105f6565b6040516101569190610b6b565b60405180910390f35b34801561016b57600080fd5b50610174610602565b6040516101819190610bee565b60405180910390f35b34801561019657600080fd5b5061019f61062a565b6040516101ac9190610c68565b60405180910390f35b6101bd610206565b005b6101c7610654565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190610bb2565b6108f8565b6040516101fd9190610bee565b60405180910390f35b678ac7230489e80000610244600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461093f90919063ffffffff16565b1015610285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027c90610ce0565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103fc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104a757600080828154811061042157610420610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049f90610d5e565b9150506103ff565b50600067ffffffffffffffff8111156104c3576104c2610da7565b5b6040519080825280602002602001820160405280156104f15781602001602082028036833780820191505090505b5060009080519060200190610507929190610a1b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052e90610e07565b60006040518083038185875af1925050503d806000811461056b576040519150601f19603f3d011682016040523d82523d6000602084013e610570565b606091505b50509050806105b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ab90610e68565b60405180910390fd5b50565b600081815481106105c757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106d9576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561075c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610712575b5050505050905060005b81518110156107e757600082828151811061078457610783610d00565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107df90610d5e565b915050610766565b50600067ffffffffffffffff81111561080357610802610da7565b5b6040519080825280602002602001820160405280156108315781602001602082028036833780820191505090505b5060009080519060200190610847929190610a1b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161086e90610e07565b60006040518083038185875af1925050503d80600081146108ab576040519150601f19603f3d011682016040523d82523d6000602084013e6108b0565b606091505b50509050806108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108eb90610e68565b60405180910390fd5b5050565b600080828154811061090d5761090c610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061094b8361097b565b90506000670de0b6b3a764000085836109649190610e88565b61096e9190610f11565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fc9190610fcf565b5050509150506402540be40081610a13919061104a565b915050919050565b828054828255906000526020600020908101928215610a94579160200282015b82811115610a935782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a3b565b5b509050610aa19190610aa5565b5090565b5b80821115610abe576000816000905550600101610aa6565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af282610ac7565b9050919050565b610b0281610ae7565b8114610b0d57600080fd5b50565b600081359050610b1f81610af9565b92915050565b600060208284031215610b3b57610b3a610ac2565b5b6000610b4984828501610b10565b91505092915050565b6000819050919050565b610b6581610b52565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b610b8f81610b52565b8114610b9a57600080fd5b50565b600081359050610bac81610b86565b92915050565b600060208284031215610bc857610bc7610ac2565b5b6000610bd684828501610b9d565b91505092915050565b610be881610ae7565b82525050565b6000602082019050610c036000830184610bdf565b92915050565b6000819050919050565b6000610c2e610c29610c2484610ac7565b610c09565b610ac7565b9050919050565b6000610c4082610c13565b9050919050565b6000610c5282610c35565b9050919050565b610c6281610c47565b82525050565b6000602082019050610c7d6000830184610c59565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e6420736f6d6520455448000000000000600082015250565b6000610cca601a83610c83565b9150610cd582610c94565b602082019050919050565b60006020820190508181036000830152610cf981610cbd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6982610b52565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9c57610d9b610d2f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df1600083610dd6565b9150610dfc82610de1565b600082019050919050565b6000610e1282610de4565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610e52601483610c83565b9150610e5d82610e1c565b602082019050919050565b60006020820190508181036000830152610e8181610e45565b9050919050565b6000610e9382610b52565b9150610e9e83610b52565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ed757610ed6610d2f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1c82610b52565b9150610f2783610b52565b925082610f3757610f36610ee2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f6181610f42565b8114610f6c57600080fd5b50565b600081519050610f7e81610f58565b92915050565b6000819050919050565b610f9781610f84565b8114610fa257600080fd5b50565b600081519050610fb481610f8e565b92915050565b600081519050610fc981610b86565b92915050565b600080600080600060a08688031215610feb57610fea610ac2565b5b6000610ff988828901610f6f565b955050602061100a88828901610fa5565b945050604061101b88828901610fba565b935050606061102c88828901610fba565b925050608061103d88828901610f6f565b9150509295509295909350565b600061105582610f84565b915061106083610f84565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109f5761109e610d2f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110dc576110db610d2f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111957611118610d2f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115657611155610d2f565b5b82820290509291505056fea2646970667358221220048d6bc7f53ac8c6045a217b0fb73eb1e40f611b720a2ce56d8c87379d1563f264736f6c63430008080033",
  "devdoc": {
    "author": "Han",
    "details": "Uses the Chainlink Price Feed contract and a PriceConverter library ",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "Calculates the amount of ETH in USD and stores the sender's address and amount funded"
      },
      "getAddressToAmountFunded(address)": {
        "params": {
          "funder": "The address of the funder to retrieve the contribution for."
        },
        "returns": {
          "_0": "The amount of Ether that the funder has contributed."
        }
      },
      "getFunder(uint256)": {
        "params": {
          "index": "The index of the funder to retrieve."
        },
        "returns": {
          "_0": "The address of the funder."
        }
      },
      "getOwner()": {
        "returns": {
          "_0": "The address of the owner."
        }
      },
      "getPriceFeed()": {
        "returns": {
          "_0": "The AggregatorV3Interface object representing the price feed."
        }
      },
      "withdraw()": {
        "details": "Resets the list of funders, sets their amounts to zero, and sends the contract balance to the owner"
      }
    },
    "title": "FundMe",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Allows users to fund the contract with ETH"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Returns the amount of Ether that a funder has contributed to the contract."
      },
      "getFunder(uint256)": {
        "notice": "Returns the address of a funder at a given index in the array of funders."
      },
      "getOwner()": {
        "notice": "Returns the owner of the contract."
      },
      "getPriceFeed()": {
        "notice": "Returns the price feed that is being used by the contract to determine the ETH/USD exchange rate."
      },
      "withdraw()": {
        "notice": "Allows the owner to withdraw all funds from the contract"
      }
    },
    "notice": "A contract that allows people to fund it with ETH and withdraw funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}