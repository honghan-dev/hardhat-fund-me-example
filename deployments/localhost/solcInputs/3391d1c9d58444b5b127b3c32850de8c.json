{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Error\nerror FundMe__NotOwner();\n\n/** @title FundMe\n * @author Han\n * @notice A contract that allows people to fund it with ETH and withdraw funds\n * @dev Uses the Chainlink Price Feed contract and a PriceConverter library */\ncontract FundMe {\n    // Using library PriceConverter\n    using PriceConverter for uint256;\n\n    // Constant is all caps and underscore by convention\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\n    address private immutable i_owner;\n\n    address[] public s_funders;\n    mapping(address => uint256) private s_addressToAmountFunded;\n\n    AggregatorV3Interface private s_priceFeed;\n\n    constructor(address priceFeedAddress) {\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n        i_owner = msg.sender;\n    }\n\n    /** @notice Allows users to fund the contract with ETH\n     * @dev Calculates the amount of ETH in USD and stores the sender's address and amount funded\n     */\n    function fund() public payable {\n        // msg.value = 1e18;\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"You need to spend some ETH\"\n        );\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    /**\n     * @notice Allows the owner to withdraw all funds from the contract\n     * @dev Resets the list of funders, sets their amounts to zero, and sends the contract balance to the owner\n     */\n    function withdraw() public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // Reset the array\n        s_funders = new address[](0);\n\n        // Send the money to the person who called this function\n        // 1. Transfer\n        // payable(msg.sender).transfer(address(this).balance);\n\n        // 2. Send\n        // bool sentSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sentSuccess, \"Failed to send Ether\");\n\n        // 3. Call\n        (bool sentSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(sentSuccess, \"Failed to send Ether\");\n    }\n\n    function cheaperWithdraw() public payable onlyOwner {\n        address[] memory funders = s_funders;\n\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0);\n\n        (bool sentSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(sentSuccess, \"Failed to send Ether\");\n    }\n\n    /**\n     * If user send this contract ether directly instead of calling the fund function, either one of it will run\n     */\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /** @dev Throws if the caller is not the owner */\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner, \"You are not the owner\");\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    /**\n     * Returns the owner of the contract.\n     * @return The address of the owner.\n     */\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    /**\n     * Returns the address of a funder at a given index in the array of funders.\n     * @param index The index of the funder to retrieve.\n     * @return The address of the funder.\n     */\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    /**\n     * Returns the amount of Ether that a funder has contributed to the contract.\n     * @param funder The address of the funder to retrieve the contribution for.\n     * @return The amount of Ether that the funder has contributed.\n     */\n    function getAddressToAmountFunded(\n        address funder\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    /**\n     * Returns the price feed that is being used by the contract to determine the ETH/USD exchange rate.\n     * @return The AggregatorV3Interface object representing the price feed.\n     */\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) public view returns (uint256) {\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // ETH in USD with 8 digits behind\n        // To get the price in USD, we need to times by 1e10\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}